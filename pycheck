#!/usr/bin/env python
"""A helper script to run static analysis tools on Python code and
report issues.

Currently supported tools are Pyflakes and PEP8.

## Usage from Emacs

Add something like the following to your init file:

```lisp
(add-hook 'python-mode-hook
          (lambda ()
            (flymake-mode)
            )
          )

(defun flymake-pycheckers-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                        (file-name-directory buffer-file-name))))
      (list (expand-file-name "~/bin/pycheck") (list local-file))))

(add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pycheckers-init))
```

Replace `~/bin/pycheck` with the location where you've saved this
script.

The results will be printed to standard out in a format compatible
with flymake.

## Usage from the command line

Simply run this script with a Python file as the only argument.

## Caveats

You may also need to set up your path up in the __main__ function at
the bottom of the file and change the #! line above to an appropriate
interpreter.

## Copyright

Copyright (c) 2013 Kevin Birch <kmb@pobox.com>. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal with the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimers.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimers in the
  documentation and/or other materials provided with the distribution.

* Neither the names of the copyright holders, nor the names of the
  authors, nor the names of other contributors may be used to endorse
  or promote products derived from this Software without specific
  prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.

## Colophon

This script is adapted from code orignally written by Jason Kirtland
<jek@discorporate.us>[1] and released under the Creative Commons Share
Alike 1.0 license[2].

Jason's code was based on original work taken from the PythonMode
page[3] of the Emacs Wiki, author unknown.

[1] https://bitbucket.org/jek/sandbox/src/tip/pycheckers
[2] http://creativecommons.org/licenses/sa/1.0/
[3] http://www.emacswiki.org/emacs/PythonMode

"""

import os
from os import path
import sys

from optparse import OptionParser

from pyflakes import api as pyflakes
from pep8 import StyleGuide, BaseReport
from flake8 import engine as flake8_engine, main as flake8_main

try:
    u = unicode
except NameError:
    u = str


USAGE_MESSAGE = "Usage: %s [options] <file>" % sys.argv[0]

RUNNERS = {}

DEFAULT_CHECKERS = ['flake8']

DEFAULT_EVENT_FORMAT = u('{filename}:{line}:{level} {code} {message}.\n')

if sys.platform.startswith('win'):
    DEFAULT_CONFIG = os.path.expanduser(r'~\.pycheck')
else:
    DEFAULT_CONFIG = os.path.join(
        os.getenv('XDG_CONFIG_HOME') or os.path.expanduser('~/.config'),
        'pycheck'
    )


def runner(clazz):
    """The decoration implementation for runner classes.

    Tracks the classes by mapping `clazz.RUNNER_NAME` to the class.
    """
    RUNNERS[clazz.RUNNER_NAME] = clazz
    return clazz


class LintRunner(object):
    """Base class for tool runners.

    """

    def run(self, filename):
        pass


class OutputFormatter(object):
    """Base class for output formatters of tool output.

    """

    ErrorLevel = 'error'
    WarningLevel = 'warning'
    InfoLevel = 'info'

    def __init__(self, output_stream=sys.stdout):
        self.output_stream = output_stream

    def error(self, filename, message, line_number):
        pass

    def event(self, filename, description, line_number, event_level, event_kind, event_number):
        pass


class DefaultFormatter(OutputFormatter):
    """Default tool output formatter.

    """

    def __init__(self, output_stream=sys.stdout, event_format=DEFAULT_EVENT_FORMAT):
        super(DefaultFormatter, self).__init__(output_stream)
        self.event_format = event_format

    def event(self, filename, description, line_number, event_code, event_level=OutputFormatter.ErrorLevel):
        self.output_stream.write(self.event_format.format(filename=filename, line=line_number, code=event_code,
                                                          level=event_level, message=description))


class PyflakesReporter(object):
    """Report events from the pyflakes tool.

    """
    IO_ERROR = 'E902'
    SYNTAX_ERROR = 'E901'

    flakes = {
        'UnusedImport': 'F401',
        'ImportShadowedByLoopVar': 'F402',
        'ImportStarUsed': 'F403',
        'LateFutureImport': 'F403',
        'Redefined': 'F810',
        'RedefinedWhileUnused': 'F811',
        'RedefinedInListComp': 'F812',
        'UndefinedName': 'F821',
        'UndefinedExport': 'F822',
        'UndefinedLocal': 'F823',
        'DuplicateArgument': 'F831',
        'UnusedVariable': 'F841',
    }

    def __init__(self, formatter, ignore_codes=()):
        """
        Construct a PyflakesReporter.

        Args:
            formatter: an OutputFormatter instance.
        Kwargs:
            ignore_codes: a tuple of codes to ignore.
        """
        self.formatter = formatter
        self.ignore_codes = ignore_codes

    def unexpectedError(self, filename, msg):
        """
        An unexpected error occurred trying to process the file.

        Args:
            filename: the filename causing an error.
            msg: the message to report.
        """
        self.formatter.event(filename, msg, '', self.IO_ERROR)

    def syntaxError(self, filename, msg, lineno, offset, text):
        """
        There was a syntax errror in the file.

        Args:
            filename: the filename causing an error.
            msg: the message to report.
            lineno: the line number of the syntax error.
            offset: the offset into the line where the error occurs.
            text: a snippet of the code with the error.
        """
        self.formatter.event(filename, msg, lineno, self.SYNTAX_ERROR)

    def flake(self, event):
        """
        pyflakes found something wrong with the code.

        Args:
            event: A pyflakes.messages.Message instance.
        """
        code = self.flakes[event.__class__.__name__]
        if code in self.ignore_codes:
            return
        level = self._guess_event_level(event.message)
        msg = event.message % event.message_args
        self.formatter.event(event.filename, msg, event.lineno, code, level)

    def _guess_event_level(self, message):
        if 'imported but unused' in message:
            return OutputFormatter.WarningLevel
        elif 'redefinition of unused' in message:
            return OutputFormatter.WarningLevel
        else:
            return OutputFormatter.ErrorLevel


@runner
class PyflakesRunner(LintRunner):
    """Run the pyflakes tool.

    """
    RUNNER_NAME = 'pyflakes'

    def run(self, filename, ignore_codes=()):
        pyflakes.checkPath(filename, PyflakesReporter(DefaultFormatter(), ignore_codes))


class Pep8Reporter(BaseReport):
    """Report events from the pep8 tool.

    """

    def __init__(self, options):
        super(Pep8Reporter, self).__init__(options)
        self.formatter = DefaultFormatter()
        self.ignore_codes = ()

    def error(self, line_number, offset, text, check):
        """Report an error, according to options.

        Args:
            line_number: the line number of the syntax error.
            offset: the offset into the line where the error occurs.
            text: the message to report.
            check: the check that was run to produce this error.
        """
        code = super(Pep8Reporter, self).error(line_number, offset, text, check)
        if code in self.ignore_codes:
            return code

        level = OutputFormatter.WarningLevel if code.startswith('W') else OutputFormatter.ErrorLevel
        self.formatter.event(self.filename, text[5:], line_number, code, level)
        return code


@runner
class Pep8Runner(LintRunner):
    """Run the pep8 tool.

    """
    RUNNER_NAME = 'pep8'

    def run(self, filename, ignore_codes=()):
        style_guide = StyleGuide(config_file=True)
        reporter = style_guide.init_report(reporter=Pep8Reporter)
        reporter.formatter = DefaultFormatter()
        reporter.ignore_codes = ignore_codes
        style_guide.input_file(filename)


@runner
class Flake8Runner(LintRunner):
    """Run the flake8 tool.

    """
    RUNNER_NAME = 'flake8'

    def run(self, filename, ignore_codes=()):
        print(flake8_main.DEFAULT_CONFIG)
        style_guide = flake8_engine.get_style_guide(config_file=flake8_main.DEFAULT_CONFIG)
        reporter = style_guide.init_report(reporter=Pep8Reporter)
        reporter.formatter = DefaultFormatter()
        reporter.ignore_codes = ignore_codes
        style_guide.input_file(filename)


def croak(*msgs):
    for m in msgs:
        sys.stderr.write(m.strip())
        sys.stderr.write('\n')
    sys.stderr.flush()
    sys.exit(1)


def usage():
    croak(USAGE_MESSAGE)


def parse_options():
    parser = OptionParser(usage=USAGE_MESSAGE)
    parser.add_option("-i", "--ignore_codes", dest="ignore_codes", default='',
                      help="comma separated list of error codes to ignore (e.g. E241,E242)")
    parser.add_option("-c", "--checkers", dest="checkers", default=','.join(DEFAULT_CHECKERS),
                      help="comma separated list of checkers to run (supported values: {})".format(', '.join(RUNNERS.keys())))
    parser.add_option("-f", "--format", dest="format", default=DEFAULT_EVENT_FORMAT,
                      help="the format to use to report feedback (default: ``{}``)".format(DEFAULT_EVENT_FORMAT))
    options, args = parser.parse_args()
    if not args:
        usage()

    return options, args[0]

if __name__ == '__main__':
    # transparently add a virtualenv to the path when launched with a venv'd
    # python.
    os.environ['PATH'] = path.dirname(sys.executable) + ':' + os.environ['PATH']

    if len(sys.argv) < 2:
        usage()

    options, source_file = parse_options()
    if len(options.ignore_codes):
        ignore_codes = tuple(options.ignore_codes.split(','))
    else:
        ignore_codes = ()

    for checker in options.checkers.split(','):
        if checker not in RUNNERS:
            croak("Unknown checker: `{}'.\nExpected one of: {}.".format(checker, ', '.join(RUNNERS.keys())))
        (RUNNERS[checker.strip()])().run(source_file, ignore_codes)

    sys.exit(0)
